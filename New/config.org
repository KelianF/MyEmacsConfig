;;; Init File

* Global Settings

** Show Columns and Lines on the Modeline
#+begin_src emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+end_src

** Remove tool bar 
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src

** Remove menu bar
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src

** Remove scroll bar
#+begin_src emacs-lisp
(scroll-bar-mode -1)
#+end_src

** Remove error bell sound
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

** Change Scroll sensi 
#+begin_src emacs-lisp
(setq scroll-conservatively 100)
#+end_src


** Clock
#+begin_src emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+end_src

** Subword
#+begin_src emacs-lisp
(global-subword-mode 1)
#+end_src

** Convenient Function
*** Kill whole world
#+begin_src emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+end_src

*** Copy Whole Line
#+begin_src emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
  
#+end_src

*** Hungry delete
#+begin_src emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+end_src

** Electric
#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      ))

  (electric-pair-mode t)
			    
#+end_src

** Highlight current line
#+begin_src emacs-lisp
(global-hl-line-mode 1)
#+end_src

** Prettify some symboles
#+begin_src emacs-lisp
(global-prettify-symbols-mode t)
#+end_src


** Org
*** basic config
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
  (add-to-list 'org-structure-template-alist
	       '("el" . "src emacs-lisp\n"))

#+end_src
*** WordWrap
#+begin_src emacs-lisp
(visual-line-mode t)
(global-visual-line-mode t)
(setq-default word-wrap t)
#+end_src




** Python OrgMode

#+begin_src emacs-lisp

  (org-babel-do-load-languages

   'org-babel-load-languages

   '((python . t)))

(add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)

#+end_src

** Ido Mode
*** Enables
#+begin_src emacs-lisp
  (setq ido-inable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src

*** Ido-vertical
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src

*** smex
#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
	  
#+end_src


*** Switch-buffer
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+end_src
** Buffers
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+end_src

*** Kill all buffers
#+begin_src emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)

#+end_src

*** Always kill current buffer
#+begin_src emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+end_src


** Avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
 
#+end_src

** Config Edit/Reload
*** Edit
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "C:/Users/kelia/AppData/Roaming/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src

*** Reload
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "C:/Users/kelia/AppData/Roaming/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src


** Switch-Window
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+end_src


** Window Splitting Func
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") ' split-and-follow-horizontally) 
    

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") ' split-and-follow-vertically) 
    
#+end_src





* Package settings
** Which-key 
# Shows available auto-complete
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+end_src



** Rainbow parenthesis 
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+end_src


** Auto completion
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src




* Echo area setting
** Only Y or N for confiramation
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src





















